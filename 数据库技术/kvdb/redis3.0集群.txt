Redis集群规范: http://redis.io/topics/cluster-spec
         翻译: http://www.redisdoc.com/en/latest/topic/cluster-spec.html
           
           
1. Redis集群目标
  1) 高性能且能线性扩展至1000个节点。
  2) 无需merge操作。
  3) 大多数情况，写操作是可靠的，但不排除可能丢失。
  4) 可用性模型，每个节点最低配置一个主节点和一个从节点。 
  
2. 使用功能限制
  为了做成集群，且不牺牲较大的性能，只能在功能上有所限制。
    1) 所有对多key的操作都无法实现
    2) 只能使用默认的0号数据库 
    
3. 节点
  3.1 节点的任务
    1) 保存部分数据
    2) 记录集群状态(每个节点都知道key和节点的映射关系)
    3) 自动感知其他节点    
  3.2 节点间的通讯
     节点间的连接采用Gossip协议进行通讯。每个节点都需要和所有其他节点建立TCP连接。
     节点间不能通过proxy方式代理请求数据，只能向客户端发送MOVED或ASK指令转向。
     每个节点都和其它所有节点建立连接，若有N个节点。每个节点都要建立 2*(N-1) 条连接。
  3.3 节点ID
    每个节点有一个由十六进制表示的160位的随机数。
    会将这个值保存到本地配置文件中，只要配置文件不被删除，会一直使用这个ID。
    集群中其他节点，是通过ID来识别身份的。因此，更换ip不受影响。(内部使用ID，外部使用IP)
  3.4 节点间的握手
    要让一个节点承认另一个节点同属于一个集群，只有以下两种方法：
      1) 一个节点发送MEET给另一个节点，强制让其接收。(只有管理员显示发出CLUSTER MEET指令，节点才会发送MEET指令)
      2) 通过可信节点传播第三者信息。
    因此，只要管理员使用CLUSTER MEET命令一次，就能加入到集群中。
     
4. write的可靠性
  4.1 异步复制
    所有写操作写入主节点，并异步同步到从节点。
    可见，其中有可能丢失数据。
  4.2 其它异常导致丢失数据
  
5. 可用性
  集群适合集中部署。较差的网络环境，会影响集群的正常运行。(节点间必须保证NODE_TIMEOUT时间内，能够正常通讯)
  集群可用前提是每个主节点及其从节点中，至少有一个可用。
  因此，N个主节点，每个主节点有一个从节点的场景下，
    1个节点失效，可用性概率 1(100%)
    2个节点失效，可用性概率 1-(1/(N*2-1))
  
6. 性能
  集群的特征决定了其性能不比单台要差。无需merge操作也确保其服务的平稳性。
  会影响性能的因素有:
    1) 客户端和某些机器的连通性。
    2) 客户端尽可能用长连接。
    
7. key分布模型
  7.1 分布算法
    Redis集群采用一致性哈希算法，共16384个槽(slot)
    哈希算法采用CRC16(key), 这是被事实证明，速度快，分布均匀的算法。
  7.2 Keys hash tags
    若key中含有{}, 则只将{}内的部分作为分布算法的输入。
    如{user1000}.name, {user1000}.age，会放到一个slot当中。

8. 转向指令
  8.1 MOVED转向
    需要发生MOVED转向时，会向客户端发送一条类似这样的转向命令。-MOVED 3999 127.0.0.1:6381
    这里，将节点的ID对外隐藏，而是发送ip信息。
    3999是slot号，客户端会保存slot 和 ip的对应关系。在稳定的集群里，最终客户端将知道所有的对应关系，因此非常高效。
  
  8.2 ASK转向
    若是迁移过程进行中(尚未完成)，暂无需客户端保存slot-ip对应关系。则发送ASK转向，已取代MOVED转向。
    区别在于让客户端请求转向，但不保存对应关系。

9. 容错机制
  1. 节点失效检测
    一个节点向另一个节点发送PING命令，在node timeout时限内，未能收到回复，则将目标节点标记为PFAIL(possible failure)。
    节点会广播其它节点的状态信息，如PFAIL, FAIL。(称为failure report)
    对于其它某个节点PFAIL -> FAIL状态的改变，需要考虑其他节点的建议。(必须要有大部分主节点进行投票表决)
    若节点重新上线，则FAIL标记会被移除。
    
  2. 集群状态监测
    有一个slot不可用，则集群进入FAIL状态。
    
  3. 节点的选举
    step1: 若主节点进入FAIL状态，则选举开始。
    step2: 在所属所有从节点中，选举出一个满足条件的从节点。
    step3: 此从节点，向其它主节点发送授权请求。申请成为主节点。
    step4: 得到授权后，开始故障转移。
    step5: 若原主节点重启，则调整为此主节点的从节点。

总结: 
  连通性: 集群中节点需要两两相连，因此彼此间需要连通性较好。
  可靠性: 大多数情况，写操作是可靠的，但不排除可能丢失。
  可用性: 在保证集群连通的前提下，有很高的可用性。
  性能:   客户端保持连通性、长连接，和单台性能几乎相同。
  功能:   通过hash tags特性，可以完成部分Multiple keys操作，但并非每次都能成功。(迁移时可能失败)
     

附一: Gossip协议的特点
  去中心化
  节点之间完全对等
  Gossip天然具有分布式容错的优点。
  Gossip是一个最终一致性算法

0. 摘要Amazon是世界上最大的电商之一，作为金融服务业，最看重的就是可靠性，任何的数据错误造成的后果可能都是灾难性的。像Amazon这样的公司，上万的数据服务器遍布在世界各地的数据中心，时时刻刻都有服务器失效。牺牲一些一致性1. 介绍    高效、可靠、高性能、可伸缩. (这些设计目标几乎成了标配，不再解释了)    去中心化，松耦合. (1. 因为客户来自于全球各地，因此必须确保用户和多个datacenter的连通性。                     2. 可以防止datacenter因龙卷风等因素的影响)                       另一个注明的Amazon存储, Simple Storage Service(S3)    可靠、一致、成本、性能中的权衡。    一致性哈希  多份数据  数据版本(解决一致性问题)    gossip 算法    只需要最少的人工干预      最终一致性的探讨      2. 背景  KV式的Dynamo和关系数据库比较    SLA协议: 通过SLA协议，确保99.9%的响应在300ms以内返回。           客户的一个请求，可能会调用服务器端100多个服务，因此，为了达到总体要求，每个组件也都必须遵守SLA协议。             一致性模型:    Dynamo要求作为一个永远可'写'的系统。因此，一致性模型上只能在'读'上面做文章。    1. 业务层上，可以将多个不同版本进行merge    2. 或是在数据层上，使用'最后一次写入获胜'策略        3. 相关工作  P2P:     第一代P2P, 非结构化P2P, 最初是为了文件共享系统, 会尽可能的在网络上寻找节点。    第二代P2P, 结构化P2P, 可以在常数级的跳数内，得到回答。        flat namespaces    分布式文件系统和数据库:        4. 系统架构            
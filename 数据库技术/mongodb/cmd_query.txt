1. db.foo.find().help() 简单的列举了find后面的选项
            .sort( {...} )              // order by
            .limit( n )                 // limit
            .skip( n )                  // skip中尽量避免使用large-number
            .count()                    // count, ignores skip,limit
            .size()                     // count, honors skip,limit
            .explain([verbose])         // 查询性能分析
            .hint(...)                  // hint
            .showDiskLoc()              // 每条记录具体存储的位置


2. find里面的条件必须是常量，不能:
db.stock.find({"in_stock" : "this.num_sold"})			// 希望in_stock = num_sold，但无法实现

3. Example
db.users.find()											// select * from users
db.users.find({"age" : 27})								// select * from users where age = 27
db.users.find({"username" : "joe", "age" : 27})			// select * from users where "username" = "joe" and age = 27
db.users.find({}, {"username" : 1, "email" : 1})		// select username, email from users
db.users.find({}, {"username" : 1, "_id" : 0})			// 即时加上了列筛选，_id也会返回；必须显式的阻止_id返回
db.users.find({"age" : {"$gte" : 18, "$lte" : 30}})		// select * from users where age >=18 and age <= 30;  $lt, $lte, $gt, $gte
db.users.find({"username" : {"$ne" : "joe"}})			// select * from users where username <> "joe"
db.users.find({"ticket_no" : {"$in" : [725, 542, 390]}})	// select * from users where ticket_no in (725, 542, 390)
db.users.find({"ticket_no" : {"$nin" : [725, 542, 390]}})	// select * from users where ticket_no not in (725, 542, 390)
db.users.find({"$or" : [{"ticket_no" : 725}, {"winner" : true}]})	// select * form users where ticket_no = 725 or winner = true
db.users.find({"id_num" : {"$mod" : [5, 1]}})			// select * from users where (id_num mod 5) = 1
db.users.find({"$not": {"age" : 27}})					// select * from users where not (age = 27)
db.users.find({"username" : {"$in" : [null], "$exists" : true}})	// select * from users where username is null; 如果直接通过find({"username" : null})进行查询，那么连带"没有username"的纪录一并筛选出来
db.users.find({"name" : /joey?/i})						// 正则查询，value是符合PCRE的表达式
db.food.find({fruit : {$all : ["apple", "banana"]}})	// 对数组的查询, 既包含"apple",又包含"banana"的纪录
db.food.find({"fruit.2" : "peach"})						// 对数组的查询, 第3个(从0开始)元素是peach的纪录
db.food.find({"fruit" : {"$size" : 3}})					// 对数组的查询, 查询数组元素个数是3的记录，$size前面无法和其他的操作符复合使用
db.users.findOne(criteria, {"comments" : {"$slice" : 10}})		// 对数组的查询，只返回数组comments中的前十条，还可以{"$slice" : -10}， {"$slice" : [23, 10]}; 分别返回最后10条，和中间10条
db.people.find({"name.first" : "Joe", "name.last" : "Schmoe"})  // 嵌套查询
db.blog.find({"comments" : {"$elemMatch" : {"author" : "joe", "score" : {"$gte" : 5}}}})	// 嵌套查询，仅当嵌套的元素是数组时使用,
db.foo.find({"$where" : "this.x + this.y == 10"})		// 复杂的查询，$where当然是非常方便的，但效率低下。对于复杂查询，考虑的顺序应当是 "正则 -> MapReduce -> $where"
db.foo.find({"$where" : "function() { return this.x + this.y == 10; }"})	// $where可以支持javascript函数作为查询条件
db.foo.find(name: { $regex: "^abc" })                   // select * from foo where name like "%abc"; 对于没有^的查询，将不能利用到索引

4. findOne()
等同于find().limit(1). 后面不能加其它选项。好处有两个，一是显示的格式非常友好，二是没有字符长度的限制(find中一条记录的最大长度不超过256个字符)

5. findAndModify()
详见 atomic operation

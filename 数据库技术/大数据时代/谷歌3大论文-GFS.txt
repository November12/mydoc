GFS - Google File System

1. 简介
  设计目标:
    运行在廉价的普遍硬件设备上
    面向大规模数据密集型应用的(大数据存储)
    可伸缩的分布式文件系统(伸缩性)
    为大量客户机提供了高性能的服务(高性能、高并发)
    
  和普通文件系统的区别:
    持续的监控、错误侦测、灾难冗余以及自动恢复的机制
    管理数10亿的小文件是不可想象的，对I/O及Block的尺寸都要重新考虑
    写入只能在文件尾部追加(避免随机写), 一旦写入完成，对文件的操作只能是读(而且尽量是顺序读)
    简化的一致性模型

    
    
    
    
    
2.设计概述
  架构:
    一个GFS集群包含:
      1. 一个单独的Master节点
        1.1 Master保存3种类型的元数据
          文件和Chunk的命名空间
          文件和Chunk的对应关系
          每个Chunk副本的存放地点
        1.2 不持久化保存Chunk位置信息
            元数据都保存在内存中, 不进行持久化保存。Master启动时，通过轮询chunk服务器，更新信息。
            这样做设计会简单很多，如果持久化保存，需要注意很多问题。这样的设计理由是：只有Chunk服务器才能最终确定一个Chunk是否在它的硬盘
        1.3 操作日志
            Master也会记录变更日志，通过日志进行主从复制。
            另外,变更日志也清晰的表明了操作的先后顺序关系。
        1.4 应该尽量减少client和master之间的通讯，以免master成为瓶颈，包括:
          client批量请求chunk信息
          client本地chunk信息缓存
          master推测并返回后序chunk信息
      2. 多台Chunk服务器
        Chunk尺寸: 64MB, 比一般文件系统大得多
        选择较大尺寸Chunk的好处:
          减少客户端和master通讯的需求
          有利于客户端本地缓存chunk信息(就算工作数据集TB级，信息量也不算大)
          同时也减轻了Master上chunk总的信息量，使得元数据可以全部存放到内存中
        较大尺寸Chunk带来的问题:
          许多小文件放在一个chunk中，使得某些chunk很容易成为热点
            此问题通过其它方式解决, 例如:
              设置更多的复制份数
              错开程序的并发访问
              采用p2p方式分享数据
      3. GFS客户端库
  
  一致性模型:
    GFS支持一个宽松的一致性模型。
    ... 比较复杂，待深入研究
    
    
    
    
3. 系统交互
  
    
    
1. 背景
  案例一: 程序需要连接Server, Server的地址，端口信息保存在哪里呢？
    ①. 程序初哥一般是写死在程序里，到要改变时就去改程序，然后再编译发布
    ②. 程序熟手则一般把这些信息写在一个配置文件里（JAVA一般都是*.properties文件），到要改变时只要改配置文件，但还是重新启动系统，以便读取配置文件里的新值
    ③. 程序好手则会写一个段代码，把配置值缓存起来，系统在读值的时候，先看看配置文件有没有更动。如有更改则重读一遍，否则从缓存里读取值
    ④. 程序高手则懂得取物为我所用，用JMX！把配置属性集中在一个类，然后写一个叫MBean的东东，再配置一下就轻松搞定了。而且JMX自动提供了一个WEB页面来给你来改变这些配置信息。
    
  案例二: Web应用系统总算开发了，接下来该如何让客户（Web应用系统的管理员）轻松管理我的一堆配置文件?
    服务器非常多，需要集中管理所有的配置文件
    配置可以动态修改，无需重启程序
    管理员无需了解配置文件的格式，通过Web就可轻松搞定
    系统已经搭建好了，希望再添加管理功能，对原有的代码不需要做过多的修改
    
  JMX的管理框架为你很好的解决了这些问题。现在的企业应用，运营，已经不可避免的需要这些功能。


  
2. JMX简介
  Java Management Extensions, 是一个为应用程序植入管理功能的框架
  
  JMX是一份规范，SUN依据这个规范在JDK（1.3、1.4、5.0）提供了JMX接口, 而根据这个接口的实现则有很多种, 
  比如Weblogic的JMX实现、MX4J、JBoss的JMX实现。在SUN自己也实现了一份。
  
  JMX技术提供一个简单，标准的方式管理应用程序，设备和服务等资源，
  一旦这些资源被创建，安装和实现，你能利用JMX的动态特性来监控和管理它们。
  同时也可以用JMX来监控和管理JVM。

  JMX技术基于以下两个JSR开发：
    * JSR 3, Java Management Extensions Instrumentation and Agent Specification
    * JSR 160, Java Management Extensions Remote API 

    
    
3. 为何使用JMX
  ①. JMX使得Java应用可被管理只需要很少的投入：
    一个JMX agent能运行在大部分Java激活的设备上，因此Java应用是否可被管理与原来的设计基本没有冲突。
    Java应用只需要简单的嵌入一个管理对象的Server，并在其上注册一个或多个管理Beans（MBeans）在Server上，使Server上一些功能可用。这就是从管理的基层结构获得的益处。
  ②. JMX提供一个标准的方式管理Java编写的应用，系统和网络，例如：JavaEE 5的应用服务器遵循JMX架构，因此可以使用JMX技术管理。
  ③. JMX可以使用于JVM。你可以轻易的启动一个JMX agent 访问这内置的JVM，因此可以远程的管理和监控JVM
  ④. JMX提供一个可升级的，动态管理的构架。每个JMX agent服务都是独立的模块，可以根据需求，可插入管理agent中去。
  ⑤. JMX技术利用了以前存在的标准Java技术，例如JNDI
  ⑥. 使用NetBeans IDE5.0的JMX模块开发JMX应用已经非常容易了。你可以从NetBeans升级重新获得这JMX模块
  ⑦. JMX可以容易的集成已经存在的管理方案和技术。例如：JMX agents可以通过HTML浏览器管理，JMX APIs是开放的接口，
      任何管理系统卖主都可以利用。JMX方案可以使用Jini网络技术和Service Location Protocol (SLP)来查询服务。

  JMX的分层结构以及高度的组件化，通过将各种资源封装成 MBean的方式，让我们可以很低成本的实现对现有Web应用的扩展性很强的管理方案。 
  这些工作要是自己去做，实在是繁琐。

  
  
4. 如何用JMX创建管理系统
  ①. 针对每一个需要管理的资源创建一个MBean的实例
  ②. 编写一个MBean描述文件(XML)，并描述每一个MBean
  ③. 通过读MBean描述文件，生成MBeanInfo，从而生成一个个MBean
  ④. 将需要进行管理的MBean注册到MBean Server当中
  ⑤. 编写管理客户端的Web页面


  
  
  
1. NIO, 即New IO。说得简单一点，就是异步IO。2. 工作原理  java NIO采用了通道(channel)进行数据传输，在通道上可以注册我们感兴趣的事件。  事件分为4种, ACCEPT, CONNECT, READ, WRITE  3. 总结  见附1代码所示，使用NIO，和直接epoll编程，并未简化其步骤，只是简单的将其进行了封装。  由于接口的问题，windows平台上未能使用到IOCP，而是select，这也成为跨平台的一个重大问题。  很少有人直接使用NIO，而是使用基于NIO的框架，如netty, mina等。      附1. 代码示例  1.1 服务器端    public class NIOServer {      private Selector selector;               public static void main(String[] args) throws IOException {        NIOServer server = new NIOServer();           server.initServer(8000);           server.listen();      }      // 可见, NIO里将套接字应用一个名字Channel来描述      public void initServer(int port) throws IOException {           ServerSocketChannel serverChannel = ServerSocketChannel.open();           serverChannel.configureBlocking(false);           serverChannel.socket().bind(new InetSocketAddress(port));        this.selector = Selector.open();        serverChannel.register(selector, SelectionKey.OP_ACCEPT);         }      // 这段代码和直接使用epoll，select的代码相比，并没有什么区别      public void listen() throws IOException {           while (true) {            selector.select();            Iterator ite = this.selector.selectedKeys().iterator();             while (ite.hasNext()) {                SelectionKey key = (SelectionKey) ite.next();                ite.remove();                 if (key.isAcceptable()) {                    ServerSocketChannel server = (ServerSocketChannel) key.channel();                    SocketChannel channel = server.accept();                       channel.configureBlocking(false);                       channel.write(ByteBuffer.wrap(new String("向客户端发送了一条信息").getBytes()));                       channel.register(this.selector, SelectionKey.OP_READ);                   }                 else if (key.isReadable()) {                       read(key);                   }               }           }      }    }   
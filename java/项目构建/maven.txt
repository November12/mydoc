  参考资料: maven实战
  关键词: 坐标、依赖、仓库、生命周期、插件

1. maven介绍
  一般将Ant当作Java编程项目的标准构建工具。
  但maven比ant更加简洁，功能更加强大。越来越多的项目使用maven。
  

2. maven安装和配置
  2.1 安装
    tar xzf apache-maven-3.2.1-bin.tar.gz
    ln -s apache-maven-3.2.1 apache-maven
    export M2_HOME=/home/hujj/bin/apach-maven
    export PATH=$PATH:$M2_HOME/bin
    mvn -v
    mvn help:system               -- 生成~/.m2本地仓库，并验证网络连通性
    拷贝一个settings.xml到~/.m2/settings.xml
  
  2.2 安装目录
    ~/.m2             默认的本地仓库地址  
  
  2.3 设置HTTP代理
    由于公司网络原因，有时需要设置代理。
  
  2.4 Eclipse安装maven
    step1: 使用资源仓库 http://www.fuin.org/p2-repository/ ，安装slf4j-api，以及slf4j-log4j12
    step2: 使用Eclipse Marketplace安装 "maven integration for eclipse(juno and newer)" (还是market快!)
    打开Window  -->  Preferences，能看到已有maven选项。
    
  
3. maven入门
  3.1 maven项目目录
    必须遵循Maven的约定，创建目录。
    src\                代码目录
      main\             源代码
        java\           java源代码
      test\             测试代码
    target\             编译后的.class文件，以及打包文件(.jar, .war)
    pom.xml             配置文件(makefile)
  
  3.2 编写主代码
    下面是最简单的pom.xml
    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
      <modelVersion>4.0.0</modelVersion>
      <groupId>gw.hujj.maven</groupId>
      <artifactId>hello-world</artifactId>
      <version>1.0-SNAPSHOT</version>
      <packaging>jar</packaging>
    </project>
    
    mvn complie即可编译生成.class文件  (只要pom.xml 和 helloworld.java即可)
  
  3.3 编写测试代码
    测试代码命名必须是Test开头，或Test结尾，非常好用。需要自动跑的测试用例，函数前加上@Test标记。
    准备好pom.xml和测试用例之后，maven clean test执行
    
    在上面pom.xml的基础之上，添加: (测试代码需要用到junit
    <dependencies>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>3.8.1</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
    
  3.4 打包运行
    打包: mvn clean package       (上面指定了jar包)
    安装: mvn clean install       (放置到本地仓库)
    
  
4. 坐标和依赖
  4.1 坐标
    任何一个构建都必须明确定义自己的坐标。
    Maven的坐标元素包括，groupId, artifactId, version, packaging, classifier
    groupId: 当前Maven项目(模块)隶属的实际项目。如 org.sonatype.nexus
    artifactId: 当前Maven项目(模块)名称。
    version: 版本号
    packaging: 打包方式，如jar, war, 默认是jar
    classifier: 附属构建，不能直接定义，由附属构建帮助生成。
  
  4.2 依赖
    <project>
      <dependencies>
        <dependency>
          groupId, artifactId, version: 依赖的坐标
          type: 即packaging，默认jar
          scope: 依赖的范围
          optional: 
          exclusions: 排除传递依赖
        </dependency>
      </dependencies>
    </project>

    
5. 仓库
  仓库将各个maven项目所需的共享构建，集中保存在某个地方。
  5.1 仓库路径
    任何一个构件都有其唯一的坐标。根据这个坐标可以定位其在仓库中的唯一路径。
    groupId/artifactId/version/artifactId-version.package
    groupId: 项目组织唯一的标识符, 如org.testing, 会转换成org/testing, 
    artifactId: 项目名称
  
  5.2 本地仓库 - <localRepository>
    若本地仓库存在此构件，则直接使用; 若本地仓库不存在，则远程仓库下载到本地仓库再使用。
    每个用户只有一个本地仓库，开始时是空的。
    
  5.3 远程仓库 - <repository>
    远程仓库和本地仓库的关系，就好比书店和书架的关系。开始书架是空的，想看什么书就要到书店去买，买回来放到书架上。
    1) 中央仓库
      maven有且仅有一个中央仓库，用 <id>central</id> 表示
    2) 私服
      由于各种原因，需要在局域网内部搭建仓库。(私服优点很多)
    3) 其他远程仓库
      中央仓库的补充
    

6. 生命周期和插件
  6.1 生命周期
    6.1.1 生命周期介绍
      可以说，java在抽象方面，做得太好了。
      maven对构建过程的抽象: 清理、初始化、编译、测试、打包、集成测试、验证、部署、站点生成
    6.1.2 三套生命周期
      maven有3套不同的生命周期，彼此独立，没有交集。
      分别是:
        clean: 负责清理项目, 包括pre-clean, clean, post-clean三个阶段
        defalut: 构建项目，阶段非常多。
        site: 建立和发布站点。包括pre-site, site, post-site, site-deploy四个阶段。
    6.1.3 命令行与生命周期
      ...
      
  6.2 插件
    maven仅仅定义了生命周期，具体的实现，是交由插件完成的。
    6.2.1 默认绑定
      插件通常以 "插件:目标" 描述。生命周期的每个阶段，需要和插件进行绑定。
      如clean 和 maven-clean-plugin:clean绑定。
      对于用户来说，这样的绑定是透明的，必要时会从网上下载插件。
    6.2.2 自定义绑定
      <build>
        <plugins>
          <plugin>
            ..
          </plugin>          
        </plugins>
      </build>
    插件的使用也是很复杂的，在此省略一万字。
    
  
    
  

  




  
  
  
  
  
  
  
  
  
  
  
  
  
附一. mvn常用命令
  mvn help:system                       列出系统属性和环境变量
  mvn package                           将打好的包到输出目录（target目录下)
  mvn install                           将打好的jar包安装到你的本地库中(默认.m2/)
  mvn clean                             清除编译生成结果
  mvn clean install                     先clean，再install
  mvn install:install-file -Dfile=D:\mvn\spring-context-support-3.1.0.RELEASE.jar -DgroupId=org.springframework -DartifactId=spring-context-support -Dversion=3.1.0.RELEASE -Dpackaging=jar
                                        安装一个jar包
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
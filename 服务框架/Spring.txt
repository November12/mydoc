一个轻量级的应用程序框架


轻量级 vs 重量级

  重量级(如EJB)应用程序框架，确实功能非常全面，但也带来一些问题:
    部署复杂、运行缓慢
    内在服务多，启动慢
    规则多、空间小
    难以调试
  一个应用，那些复杂的功能是用不到的。那么去掉用不到的组件，裁剪成一个轻量级的框架，会更合适一些。(就像重型战斗机和轻型战斗机一样)


Spring中的一些概念
  IoC: 控制反转, 实现对象之间依懒关系的转移。(依赖只需要配置即可)
  AOP: 面向切面的编程, 
  持久层的封装和事务管理: 可以和Hibernate, iBaTIS, OJB等整合
  Web框架: 自己实现了MVC模式的Web框架。并且还可和Struts, JSF等Web组件整合
  

1. IoC
  不同模块之间的依赖关系，通过抽象类(或接口)来实现，不直接调用对方具体的实现。
  而这个抽象类也不能依赖具体类的实现。
  应用不应该依赖于容器。(否则可移植性大大降低)
  
  Spring通过配置文件来描述对象的创建方法、参数、依赖关系。从而解决这些问题。
  
2. AOP
  编程方法(面向过程、面向对象、面向切面)就是分解问题的方法。
  一个复杂的系统会有多个关注点，例如业务逻辑、日志等。
  OOP是将关注点整合在一起去解决问题。而AOP则是单个的去考虑每个关注点，而关注点本身确不知道正被别的"关注"
  
  显然, OOP和AOP是不冲突的，他们抽象的层次不一样。(在AOP的每个关注点中，依然可以采用OOP来编程)
  

  
Spring框架

Spring框架是一个分层结构，由7个定义良好的模块组成。每个模块都可单独存在，也可与其他模块联合实现。

1. Spring Core
  核心容器将配置和依赖关系，同实际应用代码分离。 (显然，IoC是在这里实现的)
  
2. Spring Context
  Spring上下文是一个配置文件，向Spring框架提供上下文信息。如JNDI, EJB, 电子邮件等
  
3. Spring AOP
  使框架管理的任何对象，都支持AOP
  
4. Spring DAO
  处理不同数据库抛出的异常，简化错误处理。

5. Spring ORM
  Spring框架插入了若干个ORM框架，从而提供了ORM的对象关系工具。包括ODO, Hibernate, iBatis SQL Map
  
6. Spring Web 模块
  为基于web的程序提供上下文。

7. Spring MVC 框架
  一个全功能的构建Web应用程序的MVC实现。
  
  

  
IoC容器

使用IoC容器，不需要关心容器是怎样的，也不需要调用容器的任何API。

Spring容器就是一个通用的Bean工厂
IoC的根基是 org.Springframwork.beans.factory.BeanFactory接口。
最常用的是 org.Springframwork.beans.factory.xml.XmlBeanFactory类，通过xml文件配置bean对象以及维护对象之间的依赖。


容器的初始化
1. org.springframework.core.io.Resource    访问资源文件的统一方法, 可以通过文件系统、二进制流、URL 等等。
  Resource resource = new FileSystemResource("/usr/local/application/beans.xml");     // 根据文件系统
  // ClassPathResource resource = new ClassPathResource("bean.xml");                     // 更多的是通过类路径方式访问
  BeanFactory factory = new XmlBeanFactory(resource);
  
  BeanFactory接口很简单, 仅6个方法供客户代码调用:
    boolean containsBean(String bean);     // 判断是否包含名称的定义
    String[] getAliases(String name);          // 返回指定bean的别名
    Class getType(String name);                 // 返回指定名称的bean的实例
    Object getBean(String, Class);              // 返回以指定名称注册的bean (会进行类型检查)
    Class getType(String name);                 // 返回bean的类描述对象
    boolean isSingletion(String);               // 判断bean的实例是否为单例模式
    
  
例子:
  业务处理对象:                 Class IoCService  (这是一段很神奇的代码，从代码里面，根本看不出来任何框架的影子)
  配置文件:                     xml格式  (这也是最重要的部分，通过配置文件，把代码和框架联系起来)
  IoC容器初始化和业务方法调用:  IoCMain  
  
  任何java对象都可以放到Spring IoC容器中管理, 任何java对象都可通过<bean>来配置
  
Bean的创建:
  1. 使用构造方法创建Bean实例
    <bean id = "constructBean" class = "cn.hxex.springcore.construct.ConstructBean" />
    等同于 ConstructBean constructBean = new ConstructBean();
  
  2. 使用静态工厂方法创建Bean实例
    <bean id = "staticFactoryBean" class = "cn.hxex.springcore.construct.StaticFactory"
     factory-method = "getStaticFactoryBeanInstance" />
    等同于调用 StaticFactory.getStaticFactoryBeanInstance()创建实例。(注意，此方法必须是静态方法)
    
  3. 使用实例化的工厂方法创建Bean的实例
    <bean id = "dynamicFactory" class = "cn.hxex.springcore.construct.DynamicFactory" />
    <bean id = "dynamicFactoryBean" factory-bean = "dynamicFactory"
     factory-mothod = "getDynamicFactoryBeanInstance" />
    等同于 DynamicFactory dynamicFactory = new DynamicFactory();
           DynamicFactoryBean dynamicFactoryBean = dynamicFactory.getDynamicFactoryBeanInstance();
    方法不需要静态方法
    
Bean的依赖注入:
  ...
  
  
  
  
  
  
资源:
  
  
  


    
    
    
Spring MVC

目录结构
project/
  src/            java源文件，资源文件、配置文件
  WebRoot/        
    WEB-INF/      
    Classes/
    lib/          三方的库文件
    
    

  
  
用户只能是通过url去请求页面, 那url和页面怎么映射的呢。
Spring是采用控制器和控制器映射解决的。
控制器映射类定义路径匹配规则，控制器类定义控制生成的页面，以及初始化页面。而页面考虑具体业务逻辑。 
url -> 控制器映射 -> 控制器 -> 页面

注意，从结构上看，控制器也可以处理业务代码。但一定不要这样做，所有业务逻辑代码都放到页面中去做。


解析器:
  为了更加灵活的融合各种技术，Spring中使用解析器来统一处理解析工作。比如xml解析器，jsp解析器等。
  
  




  

  
  
  

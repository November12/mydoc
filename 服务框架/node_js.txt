  参考资料：
    Node.js开发指南

  JavaScript，本是客户端运行的一小段脚本。在各大浏览器的竞争中不断成长，性能一举成为脚本之王。
  从而为其进入服务器端开发奠定了基础。
  
1. node.js简介
  
  关键词: 单线程、异步式I/O、事件驱动、服务器端的JavaScript

  Node.js，是一个可以让JavaScript运行在服务器端的平台。使JavaScript脱离浏览器的束缚，就像PHP，Python程序一样。
  Node.js的目的，是做一个实时的Web应用开发。从2009年诞生至今，仅仅几年，就有了上万个第三方模块，其受欢迎程度，可见一斑。

  
2. 安装与配置
  

3. 

4.


5. 使用Node.js进行Web开发
  5.1 动态网页的开发模式
    我们需要动态网页，这是显而易见的。
    1) CGI时代
      最早的实现方法是利用某种语言，如perl(其实什么语言都行，C++都行)，通过CGI，和Web服务器交互。
      这种方式的问题在于，HTML文本是庞大的，这么庞大的文本，全都由perl去用print生成。显然效率极其低下。
    2) ASP/PHP/JSP时代
      2000年的ASP，反其道而行之，在HTML中插入动态代码，解决了CGI的问题。
      但这种方式，将页面和逻辑紧密结合在一起，非常不便于管理。
    3) MVC时代
      于是，各种MVC架构孕育而生。PHP/JSP只负责页面展示，业务逻辑由对象去处理。
  5.2 不需要Web服务器
    node.js直接面对HTTP协议，居然不需要Web服务器，太不可思议了。
    这样的好处是显而易见的，减少了中间环节，性能更好。(且不说node.js的性能已经高于PHP了)
    但是安全性怎么保证呢? 以前毕竟有Web服务器帮忙挡一下。
    
  5.3 
  
  
  
  
为什么要用Node.js？
  1. Node.js at PayPal     
    http://www.paypal-engineering.com/2013/11/22/node-js-at-paypal/
    主要有两个原因: 
      1. 性能: 至少比java快一倍
      2. 开发效率: 2倍的开发速度，减少33%的代码，60%的文件
      
  
    
    

  
  
  
  
  


  Node.js是一个可以快速构建网络服务及应用的平台。该平台的构建是基于Chrome's JavaScript runtime。(V8)
  Node对一些特殊用例进行了优化，性能因此更有保障。
  
  Node选择了一种既能提高性能，又能减低开发复杂度的架构。
  Node.js是单线程的。它通过事件轮询来实现并行操作。
  
  Node.js使用Module模块去划分不同的功能，以简化应用的开发。
  
  
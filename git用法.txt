1. 本地存储区域
  git分为3个区域:
    1、工作区(working directry)
    2、暂缓区(stage(index))
    3、历史记录区(history)
    
  工作区数据存放在本地目录(大家平时修改的，能看到的)
  暂缓区和历史区内容，放在.git/object目录下 (两个区不同仅在于index信息)
  
2. HEAD指针
  HEAD指向当前操作的分支:版本，通常是最新版本。
  对HEAD的操作，也就是对这个版本的操作。
  

  
  
显示信息类命令:
git branch -a                   查看远程分支
git branch                      查看本地分支
git log                         查看最近的若干commit



提交/撤销类命令:




比较/合并类命令:
git diff                        工作区 vs 暂缓区
git diff --cached               暂缓区 vs 历史区
git diff HEAD                   工作区 vs 历史区



本地/远程同步命令:
  
  
  
  
add         工作区 -> 暂缓区
commit      暂缓区 -> 历史区
reset       历史区 -> 暂缓区
checkout    暂缓区(历史区) -> 工作区, 丢弃本地修改(小心!!)






  
  

git config --global //配置 user name and email

add        添加文件内容至索引
bisect     通过二分查找定位引入 bug 的变更
branch     列出、创建或删除分支
checkout   检出一个分支或路径到工作区
clone      克隆一个版本库到一个新目录
commit     记录变更到版本库
diff       显示提交之间、提交和工作区之间等的差异
fetch      从另外一个版本库下载对象和引用
grep       输出和模式匹配的行
init       创建一个空的 git 版本库或者重新初始化一个
log        显示提交日志
merge      合并两个或更多开发历史
mv         移动或重命名一个文件、目录或符号链接
pull       获取并合并另外的版本库或一个本地分支
push       更新远程引用和相关的对象
rebase     本地提交转移至更新后的上游分支中
reset      重置当前HEAD到指定状态
rm         从工作区和索引中删除文件
show       显示各种类型的对象
status     显示工作区状态
tag        创建、列出、删除或校验一个GPG签名的 tag 对象

本地命令
    git init            //初始化当前目录
    git add             //跟踪文件，或添加文件到暂存区。注意add是一个多用途命令，根据状态不同而有不同含

提交
    git commit          //提交暂存区文件到仓库
    git commit -a       //提交工作区已经修改的文件和暂存区的文件到仓库
    git commit --amend  //修改最后一次提交，或说叠加到上一次提交

网络命令
    git clone           // 获取仓库，并归入本地origin名下
    git status          // 查看状态
    git log             // 查看提交历史

文件比较
    git diff //工作文件比对暂存文件
    git diff --cached //暂存文件和已经提交文件
    git diff --staged //暂存文件和已经提交文件

移除文件
    git rm
    git rm --cached readme.txt //从暂存区及仓库移除，以后不再跟踪这个文件

移动或改名
    git mv

取消暂存
    git reset HEAD filename

重置
    git reset --hard HEAD  //重置工作目录（不包括未跟踪的文件）
         ---------要恢复单个文件，可以checkout那个文件：git checkout -- filename

回退
    git revert HEAD  //回退到上一次提交
    git revert HEAD^  //回退到上上一次提交，可以增加“^”来回到更前一次提交
    ---------注意revert回退工作目录后，可以立即做一个最新的commit，相当于拷贝一个旧版本到最新的位置

合并
    git merge hotfix  //合并hotfix分支到当前分支。注意，只是合并，合并之后的结果并未提交commit
    git merge upstream/master  //合并一个远程取回的分支

查看区别
    git diff hotfix  //查看当前分支与hotfix分支的差异
    git diff  //比较工作目录和暂存目录（索引或暂存）
    git diff --cached  //比较暂存目录（索引或暂存）和上次提交


储藏
    git stash "why stash or other"  //暂存一个状态
    git stash apply  //恢复
    git stash list  //显示以前各次stash信息
    git stach apply@{number?}  //恢复某次stash
    git stash clear  //清除队列

搜索
    git grep 字符串  //搜索一个字符串


查看分支
    git branch  //查看本地分支
    git branch -r  //查看远程分支

创建和跳入分支
    git branch mybranch  //创建一个分支，但并不设置为当前分支
    git checkout mybranch  //抽取某个分支为当前分支
         -----上面两步合一： get checkout -b mybranch

删除分支
    git branch -d 分支名

查看有哪些远程仓库
    git remote
    git remote show     
    git remote show 仓库名  //查看某个远程仓库细节

添加远程仓库到本地列表
    git remote add [在本地的简称] [远方url]   //给远程仓库增加一个本地简称
    git remote rename 旧名 新名 //修改远程仓库在本地的简称
    git remote rm  分支名  //删除远程仓库在本地的连接

抓取远程仓库中更新的数据
    git fetch 远程仓库名
         ------- fetch之后得到的分支命名为 “仓库名/分支名”，但并没有跳入这个分支，要另外checkout来跳入该分支

抓取远程仓库内容到本地并且合并
    git pull

抓取远程仓库的分支
    git checkout -b 本地分支名 远程仓库名/远程分支名
         ------注意，“-b”表示在checkout之前branch，也即先将远程分支获取到本地，再checkout跳入

推到远程仓库
    git push 远程仓库名 本地分支名:远程分支名
         ----------如果分支同名，可以只写一个
         ----------如果不是“fast forward”则会失败，因为远程仓库可能有比本地更新的内容
         ----------可以在分支名前面增加“+”来强制推送，但这样会冲掉远程仓库中的新内容

删除远程分支
    git push origin :serverfix  //冒号前面是空白，相当于推了一个空白到远程分支

显示标签
    git tag
    git tag -l 'v1.4.2.*'
    git tag -a v1.4 -m 'my version 1.4'  //添加附注型标签

启动图形界面
    git gui     //一个图形操作界面，提供基本的操作
    gitk     //仓库浏览器。感觉很好很重要
参考书籍:
  实战Nginx：取代Apache的高性能Web服务器

1. 常见Web服务器介绍
  1.1 Apache
    它源于NCSAhttpd服务器，在项目停止以后，使用者们开始交换服务器的pache补丁，于是形成了Apache.
    Apache的特点是功能强大，支持丰富。但性能不及轻量型Web服务器，内存消耗也要更高。
  1.2 Lighttpd
    从名字上来看，它是轻量级的，内存低、CPU低、性能好，支持FastCGI、CGI、Auth、输出压缩、URL重写、Alias等常用功能。
    定位和nginx一样，可以说是nginx的竞争对手。
  1.3 Tomcat
    可认为是Sun的产品，因此，作为Servlet、jsp的容器，规范实施得很好。(主要还是作为容器, Web服务器应用少)
    但对静态文件、高并发的处理能力比较弱。
  1.4 WebSphere
    IBM的产品，不多说了。
  1.5 IIS
    Microsoft的产品，只能运行在windows上，也不多说了。
    
  
2. nginx介绍
  Nginx ("engine x") 是一款
  由俄罗斯的程序设计师所开发(C语言)      (来源)
  高性能的，轻量级的                     (特点)
  1. HTTP Web 服务器                     (3个用途)
  2. 反向代理服务器
  3. 电子邮件 IMAP/POP3/SMTP 代理服务器

  
3. nginx的特点
  3.1 高并发
    Nginx使用的是epell/kqueue网络I/O模型，和Apache采用的select相比，并发的差异不言而喻。
    实际使用，2-3万个连接往往不存在问题。
  3.2 内存消耗小
    得益于架构的简洁、轻量。
    3万并发连接下，开启的10个Nginx进程才消耗150M内存。
  3.3 开源软件
    无需任何软件成本，硬件要求也较低。因此，解决方案成本低廉。
  3.4 压缩输出
    支持gzip(GNU-ZIP)的压缩。gzip在IE、firefox、chrome等浏览器上都支持。
  3.5 本地缓存
    不同格式，设置不同时长的缓存
  3.6 支持Rewrite重写规则
    能够根据域名、URL的不同，将HTTP请求分到不同的后端服务器群组。(但这点没有apache功能丰富)
  3.7 内置的健康检查功能
    如果Nginx Proxy后端的某台Web服务器宕机了，不会影响前端访问。
  3.8 模块式开发
    nginx模块几乎可以应用到任何流程的前后，使用非常方便。


4. nginx使用场合
  4.1 虚拟主机
    利用虚拟主机，不必为每一个网站，单独的配置nginx服务器，也不必运行单独的一组nginx进程。
    在用户看来，虚拟主机和独立主机完全一样。
    虚拟主机可基于多IP(多网卡)、基于域名(让nginx自己去路由)
  4.2 反向代理服务器
    负载均衡、规则过滤 。。
  4.3 Web服务器
    自身可高效处理静态网页。
    动态部分，结合FastCGI运行 PHP、JSP 、Perl等程序。

    

5. 与其他软件的配合
  先说一个很有意思的单词LAMP(Linux+Apache+MySQL+PHP/Perl/Python)。
  这些软件当初都是单独设计的，但被大家结合使用后，不断的提高彼此的兼容性，最后形成了无缝耦合的产品集合。
  nginx当然也知道LAMP，所以精心的打造起了LNMP
  
  5.1 FastCGI(PHP/ASP.NET/Perl)
    CGI解释器的反复加载是CGI性能低下的主要原因。
    如果将CGI解释器保持在内存中，并接受FastCGI进程管理器的调度，则可以提供更好的性能。
    其工作原理:
      FastCGI进程管理器自身初始化，并启动多个CGI进程，等待来自Web服务器的连接。
      客户请求 -> Web服务器(nginx) -> FastCGI进程管理器 -> CGI子进程
    FastCGI的好处是显而易见的，CGI常驻内存，现有代码也无需改变。
    通过FastCGI，nginx可以和php, ASP.NET, Perl配合使用

  5.2 Tomcat(JSP)
    Tomcat无需多说了，通过tomcat，nginx可以和JSP配合使用
  
  
6. 负载均衡和反向代理
  6.1 负载均衡
    负载均衡是有多台服务器组成的集合，其中每台都可以单独的对外提供服务。
    实现负载均衡的方法很多，这里介绍几种:
      1) 中国电信1  中国电信2
        最古老的负载均衡手段，主要靠用户自己选择
      2) DNS轮询
        服务器分配不同的IP，依靠DNS做负载均衡。显然，方法比较粗暴。DNS甚至连此IP的服务器启动没有都不知道。(缓存的缘故)
      3) 利用传输层
        也就是利用第4层交换机，采用vip技术。至少不会路由到一台网络连接都有问题的服务器上。
        可以通过交换机(硬件)实现，也可以通过LVS(软件)实现。
      4) 利用应用层
        通过反向代理的方式。如nginx
    这些负载均衡的技术，不是独立和排它的，通常需要结合起来一起使用。
    比如先通过DNS选择大区的IP(华东、华北)，再通过lvs实现负载均衡。
    
    *这里要特别说明的是，nginx的负载均衡并不完美。当有服务器故障时，nginx先发送给故障服务器，等待超时后才转发别的服务器。
    
  6.2 反向代理
    反向代理的最大好处是，作为服务器内部和外部的边界，将真正提供的服务器与外界隔离。
    其次，也提供了负载均衡等功能。
    
  6.3 IP漂移
    作为内外的门户，代理服务器是绝对不能停止响应的。否则将停止一起服务。
    因此，IP漂移的使用必不可少。
    

7. Rewrite规则
  7.1 什么是Rewrite
    很简单，就是重新解释URL。
    通过用正则的表述方式，将URL转义。
    如: rewrite ^/img/(.*)$ /site/$host/images/$1 last;     // 还可以加上if break等控制语句
    
  7.2 Rewrite的用途
    Rewrite是个非常有用的功能。可以玩出很多花样。如:
      隐藏真实的URL
      给URL设置别名
      兼容老系统
      ...
      
      
8. nginx模块开发
  nginx的模块不能够像Apache那样动态添加，必须先编译进nginx可执行文件中。(不觉得这是个缺点)
  nginx模块有3种: (模块可以看做是钩子)
    处理模块(Handlers): 用于处理HTTP请求并输出内容
    过滤模块(Filters): 用于过滤Handler输出的内容(过滤模块可以链式的挂接多个)
    负载均衡模块: 如何选择哪一台服务器
  nginx模块几乎可以应用到任何流程的前后，使用非常方便。


9. nginx的缓存服务
  nginx对缓存的支持还不够强大，毕竟是轻型的框架。
  对缓存也只是点到即止。
  9.1 本地目录保存
    用proxy_store把后端返回的页面保存，其原理是重定向
    这种方式对参数不起作用, read.php?id=1 和 read.php?id=2 都一样
  9.2 memcached
  9.3 ncache
    sina提供的项目
  9.4 proxy_cache
    nginx最新的支持
  
    



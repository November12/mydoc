资料:   LVS中文站点: http://zh.linuxvirtualserver.org/1. 介绍(转发 - 负载均衡)  LVS(Linux Virtual Server), Linux虚拟服务器  LVS是由毕业于国防科技大学的章文嵩博士于1998年5月创立，可以实现LINUX平台下的简单负载均衡。  这也是linux内核中，唯一中国人编写的代码，必须要支持啊。  VS/NAT、VS/TUN和VS/DR技术是LVS集群中实现的三种IP负载均衡技术2. 特点  简单（功能简单、算法较少)、高效(嵌入linux内核中完成)。  它的调度开销很小，所以它具有很高的吞吐率。   三种IP负载均衡技术：  1. NAT: Network Address Translation    NAT的工作原理改写报文头(目标地址、源地址和端口等)。    这样，外部来看，目标就是balancer。而无需知道内部结构。内部来看，最终的客户也是balancer，不用关心具体的请求者。    缺点就是，收和发都要经过balancer，balancer的压力非常大。  2. TUN：IP tunneling    是将一个IP报文封装在另一个IP报文的技术。既然是隧道，就有隧道的两端，所以需要两个IP。一个对外，一个对内。    这样就可以解决NAT收发都要经过balancer的问题。服务器收到报文后，直接发给最终用户。    但问题是服务器会暴露在外部。  3. DR：Direct Routing    和TUN原理相同，但不是通过IP去实现封装的，而是在MAC地址上做手脚。    这样的好处是，在外部看来，是一个vip，而不会看到真正的服务器。  三种方式比较:    还用说嘛，TUN是为了解决NAT不足的，DR是为了解决TUN不足的。3. LVS集群的三层结构:  A、负载调度器(load balancer): 它是整个集群对外面的前端机，负责将客户的请求发送到一组服务器上执行，而客户认为服务是来自一个IP地址（我们可称之为虚拟IP地址）上的。  B、服务器池(server pool): 是一组真正执行客户请求的服务器，当负载超过处理能力时，可以在服务器池中增加服务器来满足要求。(伸缩性)  C、共享存储(shared storage): 通常是数据库、网络文件系统或者分布式文件系统。为服务器池提供一个共享的存储区，这样很容易使得服务器池拥有相同的内容，提供相同的服务。  4. lvs 和 nginx的比较  lvs(DR)工作在第二层，而nginx工作在第7层。效率上lvs更高。  lvs(DR)服务器直接返回数据到客户端，nginx则需要代理。网络上lvs更优。  lvs对外只暴露vip，可以管理好ip资源。nginx无此功能。  ngxin更容易监控，对运维来说，比较容易。  nginx可做业务层的分流策略，而lvs无能为力。  nginx更容易检测各种内部故障。遇到故障时，还可处理一些业务逻辑。(如下载中途宕机，nginx可从定向下载)    所以，结论很容易得出:    所有的realserver服务都是对等的吗，是否需要更高级的分流策略，需要的话，就nginx。    访问压力有多少，QPS < 10w，直接用nginx。    其它情况就lvs。    keepalived(failover)  将有故障的web服务器从系统中剔除，恢复后再加入到服务器群中。  这些工作全部自动完成，不需要人工干涉，需要人工做的只是修复故障的web服务器。  工作原理:    可以在Layer3,4&5中实现    Layer3：Keepalived会定期向服务器群中的服务器发送一个ICMP的数据包（既我们平时用的Ping程序）    Layer4：以TCP端口的状态来决定服务器工作正常与否。如web server的服务端口一般是80，如果Keepalived检测到80端口没有启动，就认为不正常    Layer5: Keepalived将根据用户的设定检查服务器程序的运行是否正常  层次越高，检测得越精确(准确)，但开销也越大。  比如采用Layer3时，网络可能没问题，但程序已经挂掉了，这时候还是会认为服务器是激活的。Mysql Proxy  简单的说，MySQL Proxy就是一个连接池。  可以通过使用lua脚本，实现复杂的连接控制和过滤，从而实现读写分离和负载平衡。  MySQL Proxy是完全透明的。    Connection pool  Load balance  Keep session  Failover  Extendable : Lua scripts
1. 两台机器数据交换，会遇到哪些问题
  问题1: 跨语言，跨平台。  数据交互的双方，可能使用了不同的语言，甚至不同的平台。
    要解决跨语言，就不能用某种具体语言去编码，通常是使用idl
    跨平台比较容易解决，只需要规范协议就好。
    总体来说，就这个问题，各个模型都解决得很好。


  问题2: 封装性。  双方本意只是简单的交换数据，但不可避免的会涉及到网络等问题。
    有了良好的封装，开发者只需要关注数据本身，无需考虑网络等问题。
    这方面，thrift做得最好，不仅做好了封装，还可自由的搭配TProtocol，TTransports，提供了极大的灵活性。


  问题3: 协议。    交互数据必然涉及到协议，是实现静态约定，还是运行时自动生成。描述语言是否足够丰富。
    xml、json等协议，通用性很强，描述也非常丰富，但作为文本协议，性能上肯定较差，就算用到压缩算法也是。
    二进制协议，编码上容易优化，性能很好，但描述会受到局限。
    所有的协议都是合理的，没有最好的协议，只有最合适的协议。


  问题4: 性能。    性能上的主要差异来自于编码，因为涉及到网络传输。
    也就是序列化和反序列化的问题。数据交换技术中最重要的问题。
    在满足需求的前提下，性能是最重要的。这是protocol buffers的强项。
    
    
  问题5: 适应性。  数据交换前，需要双方做个事先的约定。但如果使用时，约定改掉了呢。
    良好的适应性，可以对数据结构升级，而无需重新编译所有程序。也不影响到原有的约定。
    文本模型，通过强大的语义表达，往往适应性做得很好。
    
    
  
2. 主流数据交换模型点评
  1) protocol buffers
    protocol buffers专注于编码部分，并不涉及到网络。
    可以支持java、c++ 和 python三种语言，对其它语言也可自行扩展。
    对于idl，也可做到动态加载。
    
  2) thrift
    thrift侧重于整个通讯框架，并将TProtocol和TTransports抽象出来，可以简单灵活的配置。
    thrift支持的语言非常的多，这方面完全不用担心。
    如果你的服务还没有开发网络层，那么使用thrift非常合适。
    
  3) xml & json
    作为文本协议，两者都有很强的语义表达能力，可读性好。但同时，传输体积，以及编码解码效率都很差。
    相比而言，xml的普及程度要高很多。但不管怎样，两者都有很好的普及度。易于理解沟通，适合作为外部接口。
    
  4) http
    http是无状态的，不维护连接，采用TCP保证数据可靠到达。是一种文本协议。
    http是请求/应答模式，单向通信。
    由于b/s的流行，http已经成为了浏览器的代名词。
    作为外部的交互协议，文本协议几乎是唯一的选择。换句话说，它不是高效的，灵活的，而是唯一的。因此，网内传输尽量不要用到它。
    
  5) soap
    soap是基于XML协议的，可以做到对象的序列化。
    可以通过http协议作为载体，且不会被防火墙等拦截。
    其实可以看做是http协议的补充。
  
   
  
  
  
  
  关于RPC和序列化技术(小结)
  
  
  
  
  
  
  
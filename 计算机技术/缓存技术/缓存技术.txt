可靠性(需要复制)
淘汰策略


##################################################   著名公司的案例   ##########################################
1. Facebook
Facebook有两个主要的缓存系统：
  Memcache，这是一个简单的后备高速缓存，它的智慧主要体现在客户端；
  TAO，它是一个图像缓存数据库，使用的是MySQL。
  
  Globals Cache
  APC             // php的扩展, 可以保存OPCode，和php进程共享数据。但不能被外部机器访问。
  Memcached     
  Database
  Browser Cache
  第三方CDN
  


  
  
  
  
  
  
##################################################   缓存简介   ##########################################
1. 分布式缓存的常用算法
  1.1 根据余数计算分散
    Perl的memcached客户端函数库Cache::Memcached是 memcached的作者Brad Fitzpatrick的作品，可以说是原装的函数库了
    优点:
      算法简单，分布性优秀
    缺点:
      服务器数量的变化，对缓存的数据影响极其大
  
  
  1.2 一致性哈希
    这个就不用说了，都懂的
    
    










##################################################   缓存框架   ##########################################
1. 心目中的缓存框架，应该做到:
  1. 高效
  2. 结构简单
  3. 多种缓存策略
  4. 分布式部署，突破容量限制
  5. 完整的管理接口，能够监控状态以及一切不合理的使用
  6. 


2. 将缓存嵌入到数据库，对外提供透明服务
public Person get(long key) {
  Long cacheKey = new Long(key);
  Person person = (Person)cache.get(cachekey);
  
  if (person != null) {
    cache.get(cacheKey, person);              // 先访问cache
  }
  else {
    /* Get the object from the database */    // cache访问不到时，再访问数据库
    cache.put();                              // 再创建cache
  }

  return person;
}

3. 缓存的清除策略
  置换算法: fifo, lru, unlimited
  stale: 不要实时清除stale(开销太大)，当查询到stale时再处理
  
4. 缓存选型的问题
  取舍是不可避免的
  1. 高速读取，低速写入: 间歇性更新方式的数据库的应用，如一般的Web页面
  2. 
  
  
  
  
  
  
##################################################   开源缓存框架(2013年)   ##########################################
0. JSR107规范



1. SwarmCache(19,500)
  官网: http://swarmcache.sourceforge.net (貌似打不开了)
  当前版本: 未知
  
  简介:
    SwarmCache背后的概念很简单。每个服务器都有自己的管理器。
    管理器加入一个多播组并和组内的其他管理器通信。通过管理器同步添加或删除数据。
    SwarmCache没有"server"的概念，所有的host都是同等的。
    SwarmCache是为整合到持久层为数据库的java应用之中而设计的。当把它嵌入到持久层引擎时，它的使用对更高层的应用来说是透明的。
  
  亮点:
    管理器的使用。
    通过多播进行通讯。
  
  缺点:
    多播不适合大规模部署使用。
  
  用于场合:
    作为数据库的缓存

    
2. EHCache(874,000)
  官网: http://ehcache.org/
  当前版本: 未知
  
  简介:
    1、快速轻量
      诸多测试表明Ehcache是最快的Java缓存之一。
      Ehcache的线程机制是为大型高并发系统设计的。
      需要的配置非常少，简单易用

    2、伸缩性
      Ehcache为大数据存储做过优化。
      大内存的情况下，所有进程可以支持数百G的吞吐。
      为高并发和大型多CPU服务器做优化。
      线程安全和性能总是一对矛盾，Ehcache的线程机制偏向于性能。
      通过Terracotta服务器矩阵，可以伸缩到数百个节点。

    3、灵活性
      支持基于Cache和基于Element的过期策略，每个Cache的存活时间都是可以设置和控制的。
      提供了LRU、LFU和FIFO缓存淘汰算法，构成了完整的缓存淘汰算法。
      同时提供内存和磁盘存储

    4、标准支持
      Ehcache提供了对JSR107 JCACHE API最完整的实现。实现JCACHE API有利于到未来其他缓存解决方案的可移植性。
      Ehcache的维护者Greg Luck，正是JSR107的专家委员会委员。

    5、可扩展性
      监听器可以插件化。Ehcache 1.2提供了CacheManagerEventListener和CacheEventListener接口，实现可以插件化。
      节点发现，冗余器和监听器都可以插件化。
      分布式缓存
      缓存的可扩展性可以插件化。创建你自己的缓存扩展，它可以持有一个缓存的引用，并且绑定在缓存的生命周期内。
      缓存加载器可以插件化。创建你自己的缓存加载器，可以使用一些异步方法来加载数据到缓存里面。
      缓存异常处理器可以插件化。创建一个异常处理器，在异常发生的时候，可以执行某些特定操作。

    6、应用持久化
      在VM重启后，持久化到磁盘的存储可以复原数据。

    7、监听器
      缓存管理器监听器。允许注册实现了CacheManagerEventListener接口的监听器。
      缓存事件监听器。允许注册实现了CacheEventListener接口的监听器，它提供了许多对缓存事件发生后的处理机制。

    8、开启JMX
      Ehcache的JMX功能是默认开启的，你可以监控和管理如下的MBean：
      CacheManager、Cache、CacheConfiguration、CacheStatistics 

    9、分布式缓存
      可以进行异步或同步的缓存复制。
      可靠的分发：使用TCP的内建分发机制。
      自动或手动的节点发现 (自动简单，手动好控制)

    10、搜索
      标准分布式搜索使用了流式查询接口的方式。

    11、Java EE和应用缓存
      为普通缓存场景和模式提供高质量的实现。


  亮点:
    为大型高并发系统做了很多优化
    扩展能力强，支持插件式开发
    功能强大
  
  缺点:

  
  用于场合:
    大型的缓存应用，企业级缓存解决方案
    
    
3. OSCache(484,000)
  官网: 
  当前版本: 下线
  
  简介:
    OSCache已经不维护了。在JavaEE的缓存框架领域，已经是EhCache等其它支持分布式的缓存框架的天下了。
    但是OSCache的源代码依然值得一读，一度作为最常用的缓存框架，代码量却不大，绝大部分类一天的时间就可以详详细细地阅读完。
    再复杂的缓存框架，它往往都逃脱不出这样的最基本的设计。

    缓存超期的判定：
      1. with fail over: 缓存stale -> 业务处理 -> 更新缓存 -> 返回数据
      2. without fail over: 缓存stale -> 返回数据 -> 业务处理 -> 更新缓存
      
    缓存访问状态最终有三种：
      HIT: 表示命中； 
      MISS: 表示未命中； 
      STALE_HIT: 表示命中了一个失效的缓存
      
    淘汰算法:
      FIFO
      LRU
      Unlimited

    事件/监听模型:
      CacheEntryEvent：对于cache entry发生add/remove/update/flush等操作时触发； 
      CacheGroupEvent：类似，只是对象变成了cache entry group，而不是cache entry； 
      CacheMapAccessEvent：访问cache map时触发； 
      CachePatternEvent：当cache匹配到某种模式（使用key.indexOf(pattern)判断是否匹配）时进行flush的时候触发； 
      CachewideEvent：当cache flushAll的时候触发； 
      ScopeEvent：仅在ServletCache出现flush时触发。 

  亮点:
    代码量少，有益于学习缓存框架相关知识
  
  缺点:
    代码逻辑复杂，混乱(学代码是学架构，不是学代码结构)
    不支持分布式，不支持异步，不支持批量 
  
  用于场合:
    学习缓存框架
  
4. multicache4j(3,040)
  官网: 
  当前版本: 
  
  简介:
    multicache4j用于为Java集成各种cache组件： 
      方便集成各种remote cache:
        memcached
        memcacheq
        memcachedb
        ttserver
        redis
      方便集成各种local cache:
        ehcache
    基于对象池技术管理客户端连接对象，网络断开能够自动重连
    基于Pattern Mapping进行哈希映射 
    支持remote cache和local cache的混合缓存 
    支持local cache的单独使用 

  亮点:
    
  
  缺点:
    思想很好，但用的人太少太少
  
  用于场合:
    
  
5. Java Caching system(2,280,000)
  官网: 
  当前版本: 
  
  简介:
    Java Caching System（JCS）是用java语言写的一个分布式高速缓存系统
    JCS是一个对象Cache，提高那些访问频率很高的Java对象的存取效率。
    可以将对象缓冲到内存、硬盘。
    可以通过JCS构建具有缓冲的分布式构架，以实现高性能的应用。
    对于读操作远远多于写操作的应用性能提高非常显着。

  亮点:
    
  
  缺点:

  
  用于场合:
  
  
6. JBossCache(235,000)
  官网: http://www.jboss.org/jbosscache/
  当前版本: 
  
  简介:
    JBoss Cache is a tree-structured, clustered, transactional cache.
    JBossCache是一种结构化的、基于复制的事务缓存。
    
    JBossCache包括两个模块：TreeCache和TreeCacheAOP。 
    TreeCache: 是一个树形结构复制的事务处理缓存。 
    TreeCacheAOP: 是一个“面向对象”缓存，它使用AOP来动态管理POJO
    
    树形结构的索引:
      只有一个root节点, 所以又叫JTreeCache
    
    多种复制模式(replication modes)
      invalidation mode: 
      buddy mode: 
      可同步复制，也可异步复制
      
    集群特性:
      高可用
      容错
      负载均衡
      
    本地(local)和分布式

    特性
      持久化到磁盘
      可以嵌入到JMX里面，提供运行时的各种状态
      客户端可以开一个监听端口，处理缓存事件
      在进行复制时，可以对缓存进行批处理
    
  亮点:
    分布式、事务
  
  缺点:

  
  用于场合:
    JBoss应用服务器
  
  
7. Shoal(437,000)
  官网: 
  当前版本: 
  
  简介:
    如果说很多人在拼命的整合功能的话，那么Shoal就是在拆分功能。
    Shoal抽象了两个集群重要的功能, 群集节点管理和共享状态数据。
    
    Shoal是一个基于java的动态集群框架，为构建容错、可靠和可用的Java EE应用服务器提供了基础架构支持。
    
    集群管理SPI:
      
      
    状态数据共享SPI:
      

  亮点:

  
  缺点:

  
  用于场合:
  
  
DirectMemory(1,770,000)   

  

  
  
ShiftOne(81,800)
WhirlyCache(48,100)
Jofti(62,200)
cache4j 
Open Terracotta 
Simple-Spring-Memcached 



  












  

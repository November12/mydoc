机制:
1. 通过Slab Allocator进行预分配空间，每个slab大小为1M
2. slab下用双向链表连接一串chunk, chunk最大值为1M(也就是slab只有一个chunk)
3. 有自己的压缩算法，先压缩，再放入chunk中。

不适合大数据的存储:
1. 通过增长因子(默认1.25)来确认每级的chunk大小，因此，越大的chunk之间的间隔越大，浪费的空间也就越多。
2. 不能够存储1M以上的数据。只能拆分数据。(大于1M的数据传输到memcached，先压缩，压缩后大小超过1M，出错返回，白白浪费了CPU)

值得改进的地方:
1. 文本协议效率低，传输的数据冗余大，可改为适合自己的二进制协议
2. 淘汰算法，memcached采用LRU算法。

浪费空间的地方:
1. slab的空间大小，不是chunk的整数倍，导致slab最后不足一个的chunk被浪费掉了。
2. 存储在chunk的数据往往比chunk小，浪费了部分空间。

可以通过一致性hash算法，构造分布式memcached.
没有任何方法能够保存memcached中间的数据。重起memcached之后，数据将完全丢失。

总之，memcached适用小数据，对读写性能要求很高的场合。



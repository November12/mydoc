第1章 链接和加载
机器语言时代: 
	纸上写好代码，直接在开关上编程
	如果删除或添加代码，可能导致所以地址的变化，必须调整所有的地址
	
汇编语言时代:
	有了符号化名字，不必考虑符号背后的地址。
	

步骤:
程序加载: 每个程序都加载到内存中，每个程序的地址都是从０开始(编译器认为所有程序都是从０地址开始)
重定位: 加载所有的程序到互不重叠的地址，编译器中的地址实际上变成了偏移量
符号解析: 通过修改目标代码使得call指令引用该地址 (注意：链接器会修改目标代码)


编译器的文件包含:
1. 一系列的段(segment) (代码段，常量段(bss)....)
2. 符号表(symbol table), 包括导入符号(不在当前文件中定义的)、导出符号(当前文件定义的)

链接器
1. 为符号分配地址
2. 重定位，修改段地址(重定位会修改所有的段地址)
链接器会将输入文件的段，合并到输出文件相应的段中

当链接器处理完所有规则的输入文件后，如果还存在未解析的导入名称,链接器就会到库中寻找符号。

第2章 体系结构的问题








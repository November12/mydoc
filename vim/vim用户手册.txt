1. 使用vim的几个自然阶段
  1.1 第一阶段
    一开始是notepad, word, edit垄断你的大脑，这些东西根深蒂固，挥之不去。Vim 的使用对你而言是一场噩梦，它降低而不是提高了你的工作效率。
    
  1.2 第二阶段
    开始熟悉一些基本的操作，这些操作足以应付你日常的工作，你使用这些操作时根本就不假思索。
    但它并没有特别之处。它在你心里只是notepad, edit一个勉强合格的替代品。
    
  1.3 第三阶段
    精益求精的你不满足于冗长乏味永无休止的简单操作，于是你开始寻找帮助，创造更多实用、高效的工作方式。 
    恭喜你，你已经成为vim的一员了。
    

-------------------------------------------------------------------------------------------------------


|01.1| 两套帮助
  Vim的文档由两部分组成:
    1. 用户手册面向问题，由浅入深进行讲解。可以象读一本书一样从头至尾进行学习。
    2. 参考手册详述Vim方方面面的细节。
  这些手册中用到的一些约定的记法可以在|notation|中找到。
  
  跳转命令:
    类似这样的格式是超级链接 |bar|，可以跳转的
      CTRL-] 跳转到当前光标所在单词对应的主题
      CTRL-O 回到前一个位置
 
|01.2| 关于安装
|01.3| 使用Vim教程
|01.4| 版权

-------------------------------------------------------------------------------------------------------
本章仅提供可以让你开始用Vim编辑文件的必要技巧。所用的方法可能既不是最好的也不是最快的。它只是让你有一个开端。
这里只是引导，并不会列全所有命令(也没必要)

|02.1| 首次运行Vim
  vim file.txt

|02.2| 插入文本
  Vim是一个模式编辑器。往往键入一个字符后会进入到另一个模式。
  :set showmode 可以告诉你现在处于什么模式。
  另外，<ESC>可以跳到Normal模式。
  
|02.3| 移动光标
  用hjkl来移动光标，这样无疑是最快的。你需要的不是记住哪个是上，哪个是下。你需要的是不断的练习。

|02.4| 删除字符
  删除当前字符          x
  删除当前行           dd
  删除换行符            J

|02.5| 撤消与重做
  撤销                  u
  重做             ctrl+R
  撤销一行所有操作      U (U可能会变得混淆，不喜欢用)

|02.6| 其它编辑命令
  插入                  i (当前字符前插入)
  插入                  a (当前字符后插入)
  另起一行              o (当前行后插入一行)
  另起一行              O (当前行前插入一行)
  
  命令前可以加数字，代表后面这个命令被重复执行多少次。
    想想, 9k, 3a!， 是什么意思?
  
|02.7| 退出
  保存退出              :w
  强制退出              :q! (不保存)
  重新载入              :e! (不要再退出重进了，太不专业了)
  
|02.8| 求助
  对于初学者，帮助非常重要，它可以找到任何你想要的答案。不要吝啬使用帮助。
  
  :help                 打开帮助，用功能键<F1>效果一样
  :help {subject}       查看关于某个特殊主题
  :help x               x该怎么使用
  :help deleting        不知道怎么删除
  :help index           得到所有命令的索引
  :help CTRL-H          Normal模式下ctrl + H的用法
  :help i_CTRL-H        i模式下ctrl + H的用法
  ...

-------------------------------------------------------------------------------------------------------
3. 移动
  移动光标，是做任何操作的前提，它简单到几乎感觉不到有这个操作。
  但在vim，移动光标是用惯notepad的人，最不习惯的，是学好vim的第一座大山。(notepad虽然学习成本低，但速度慢; 这就像手动挡和自动挡的区别)
  不学习它，也可以实现任何操作。但不学习它，就没有必要学习vim了。
  :help Q_lr，可以查看此类命令完整的列表

|03.1| 以Word为单位的光标移动
  向后移动一个word              w (光标落在word的第一个字符)
  向后移动一个word              e (光标落在word的最后一个字符)
  向前移动一个word              b (光标落在word的第一个字符)
  向前移动一个word             ge (光标落在word的最后一个字符)
  
  [个人习惯]: 一次定位，e, ge最多只需要使用一次，其余的定位用w, b完成
  
|03.2| 将光标移到行首或行尾
  移动到当前行行首              0
  移动到当前行行尾              $

|03.3| 将光标移动到指定的字符上
  无
  
|03.4| 将光标移动到匹配的括号上
  跳转到另一个括号上            % (大中小括号都可以)
  
|03.5| 将光标移动到指定的行上
  明确指定跳转到哪一行         4G (跳转到第4行)
  跳转到第一行                 gg
  跳转到最后一行               GG
  跳转到本屏幕的第一行          H 
  跳转到本屏幕的中间            M
  跳转到本屏幕的最后一行        L

|03.6| 告诉你当前位置
  CTRL-G 可以告诉你类似信息, "29 行 --48%--"
  更直观的方法是 :set number
  [个人习惯]: 设置:set number，尽管有人说会使屏幕小一些。
  
|03.7| 滚屏
  向上滚动半屏                 CTRL-U
  向下滚动半屏                 CTRL-D
  向前滚动一整屏               CTRL-F
  向后滚动一整屏               CTRL-B
  调整当前行在中间显示         zz

|03.8| 简单的搜索
  搜索字符串                    /string (.*[]^%/?~$需要用\转义)
  下一个匹配                    n
  上一个匹配                    N
  翻阅历史搜索                  /xx  (不按回车, 用上下箭头，翻阅以xx开头的所有命令; xx不填，则翻阅所有命令)
  查找当前word                  *
  全词匹配                      /\<the\>  (也可以只用一半, /\<the 或着 /the\>)
  忽略大小写                    :set ignorecase (不忽略, set noignorecase)
  高亮显示结果                  :set hlsearch   (关闭高亮, :set nohlsearch)
  一边搜索，一边查询            :set incsearch
  循环查询                      :set wrapscan

|03.9| 简单的模式搜索
  用正则表达式来匹配目标, 具体语法课查阅 :help pattern
  
|03.10| 使用标记
  和上次的位置来回跳转          ``
  跳转到上一个位置              CTRL-O
  跳转到下一个位置              CTRL-I
  查看跳转列表                  :jumps
  设置一个标记                  ma    (一共可以设置a~z，共26个标记)
  跳转到标记                    `a
  查看所有的标记                :marks
    其中有一些是特殊的标记:
      ° 进行此次跳转之前的起跳点
      " 上次编辑该文件时光标最后停留的位置
      [ 最后一次修改的起始位置
      ] 最后一次修改的结束位置

-------------------------------------------------------------------------------------------------------
4. 小幅改动
|04.1| 操作符命令和位移
  [个人习惯]: 虽然4x, dw都是些非常方便的方法。不过这些方法不够直观，更重要的是，它要利用大脑的计算，这个是不可以接受的。
  
|04.2| 改变文本
  修改某行                  c   (和d相比，在删除以后，会变成插入模式，仅此而已)
  修改某个字符              r   (也可以通过cl来实现，但使用r, 修改后不会进去insert模式)
  
  操作符+位移命令, 可以提供极大的便利，使用频率非常之高，以至于有些做成了快捷键:
    x 代表dl(删除当前光标下的字符)
    X 代表dh(删除当前光标左边的字符)
    D 代表d$(删除到行尾的内容)
    C 代表c$(修改到行尾的内容)
    s 代表cl(修改一个字符)
    S 代表cc(修改一整行)
    
|04.3| 重复改动
  重复上次改动              .   (可以玩出什么花样，就看你自己了)
  
|04.4| Visual模式
  Visual模式                v   (进入visual模式，然后通过光标移动，可以达到需要选择的效果)
  选择多行                  vjj (选择两行)
  块模式                    CTRL-v 
  光标跳到选择的对角        o   (注意，这是visual模式下的o)

|04.5| 移动文本
  粘贴操作                  p  (删除操作的内容，会自动放到剪贴版上。粘贴的位置是当前光标之后)
  交换两个字符              xp (不解释, 很炫吧)
  
|04.6| 复制文本
  复制操作                  y  (只将内容放到剪贴版，并不删除)

|04.7| 使用剪贴板
|04.8| 文本对象
  文本对象                  aw (a word的意思，不用使光标放到单词开始，比如daw)

|04.9| 替换模式
  replace模式               R  (又一个模式，已经有几种模式了?)
  
|04.10| 结论
  命令组合(操作符，位移)是vim的魅力所在, 下面是一些常用的方法: (更多的方法还需要自己总结归纳)
    x   删除当前光标下的字符("dl"的快捷命令)
    X   删除当前光标之前的字符("dh"的快捷命令)
    D   删除自当前光标至行尾的内容("d$"的快捷命令)
    dw  删除自当前光标至下一个word的开头
    db  删除自当前光标至前一个word的开始
    diw 删除当前光标所在的word(不包括空白字符)
    daw 删除当前光标所在的word(包括空白字符)
    dG  删除当前行至文件尾的内容
    dgg 删除当前行至文件头的内容

-------------------------------------------------------------------------------------------------------
5. 定制你的Vim
  这是vim最强大的地方，不用定制和插件，那还用vim干嘛。
  
|05.1| vimrc文件
  vimrc文件通常放在~/.vimrc，如不清楚的话，也可以查看:version
  
|05.2| vimrc示例
  这里只简单介绍几个，让大家熟悉熟悉，有点概念。
  这里介绍的命令来自于vimrc_example.vim
    ” vimrc里面注释是双引号, 
    set nocompatible                      " 设置和vi非兼容模式, 这是必须的。
    set backspace=indent,eol,start        " 任何时候都可以用退格键删除。因为这个问题，很多菜鸟认为vim出bug了。推荐
    set autoindent                        " 按上一行的格式缩进。 推荐
    set ruler                             " 右下角显示光标信息。推荐
    set showcmd                           " 一个组合操作，比如daw, 只有w键入后才会有结果。此命令告诉你现在输入到哪里了。不推荐
    map Q gq                              " 将Q映射为gq, 你脑海里应该有一张这样的映射表，有一个只属于你的vim
    vnoremap _g y:exe "grep /" . escape(@", '\\/') . "/ *.c *.h"<CR>              " 一个复杂的映射，看得懂吗?
    if &t_Co > 2 || has("gui_running")    " 打开语法高亮, 必须的。
      syntax on
      set hlsearch
    endif
    filetype plugin indent on                       " 类型自动识别。vim的个性话和美丽从此开始，必须的。
    autocmd FileType text setlocal textwidth=78     " autocmd也是非常强大的，这句是自动换行的意思

|05.3| 简单的映射
  映射的意义自不用说，可以大大简化操作，也是个性化的体现。
  随着脑海里的映射越来越多，你的编辑速度也越来越快。

|05.4| 增加一个plugin
  通过加plugin扩展vim的功能，使得vim更加强大。
  plugin基本上分为两类：
    1. 全局的
      当启动Vim时，它会自动载入一些全局的plugin
      想添加一个plugin, 只需要把它放到指定目录即可。(linux下是 ~/.vim/plugin/, 可以是其下的任何子目录，这有利于分门别类)
      
    2. 专用于某类型的：只用于特定类型的一类文件
      使用这种类型的plugin，需要:filetype plugin on
      添加方法和全局的一样，只不过目录不同。(linux下是 ~/.vim/ftplugin)
      命名方式可以是一下几种: (出现name的地方，可以是任意的)
        ftplugin/<filetype>.vim
        ftplugin/<filetype>_<name>.vim
        ftplugin/<filetype>/<name>.vim
    
|05.5| 增加一个帮助文件
  举例说明吧, 有一个插件~/.vim/plugin/matchit.vim, 那么将其帮助文件放在~/.vim/doc/matchit.txt即可使用。

|05.6| 选项设置窗口
  :options可以列出所有当前选项

|05.7| 常用选项
  不可能了解所有的选项，只能从常用的，循序渐进的了解。
    :help ‘wrap‘        查看某选项解释
    :set iskeyword&     恢复默认值
    :set nowrap         不要拆行
    ...
    
总结一下，你应该有这样一些个性化的东西
  属于自己的设置选项           .vimrc
  属于自己的快捷键             .vimrc
  自己喜欢、习惯的插件         plugin ftplugin
  自己的配色方案               mycolor.vim
现在就建一个目录，把这些文件，文件夹建立起来吧。内容可以一边学一边填充。

-------------------------------------------------------------------------------------------------------
6. 使用语法高亮
  很难想象，没有语法高亮的编辑器该怎么去阅读。
  
|06.1| 打开色彩
  :syntax enable
  色彩来自于对不同格式的解读，相信一般人编辑的文件，比如c,cpp，都是vim默认就有的，无需配置。
  
|06.2| 没有色彩或色彩错误?
  原因一: 显示器不支持，或配置的终端类型不对。
  原因二: vim不识别文件类型。:set filetype可以查看当前文件类型，如果没有类型，可通过:set filetype=cpp指定
          指定类型还有一种方式，例如在Makefile文件中，加入 # vim: syntax=make
  
|06.3| 不同的颜色
  编辑一个自己喜欢的颜色方案
    1. 编辑一个颜色方案, mine.vim       找一个相近的颜色方案，不要从头去写mine.vim
    2. 放到~/.vim/colors目录下
    3. colorscheme mine
    
  想看看各种颜色的显示效果，可以:runtime syntax/colortest.vim

|06.4| 有色或无色
  我一直想要颜色，不需要这个设置

|06.5| 彩色打印
  太高端了，办公室哪来的彩色打印机

|06.6| 进一步的学习
  |usr 44.txt| 自定义语法高亮文件|syntax|囊括所有细节

-------------------------------------------------------------------------------------------------------
7. 编辑多个文件
  用惯了notepad的人，在移动、选择、编辑之后，又遇到一个新的坎，那就是多文件编辑。
  在notepad上面这很方便，根本不需要学习。到这里为止，可能一直在发牢骚，为什么要学习vim。
  
|07.1| 编辑另一个文件
  :edit foo.txt                 关闭当前文件，打开新的文件 (通常不会用到，还不如关闭再打开)
  :open foo.txt                 新打开一个文件
  vim one.c two.c three.c       开启时就指定打开多个文件
  

|07.2| 文件列表
    ...
  
|07.3| 切换到另一文件
  可以使用next, previous, first, last来切换。但这样操作不是很方便，有更快的:
  切换到下一个tab               :bn
  切换到上一个tab               :bp
  指定切换到第二个tab           :b2
  两个文件互相切换              CTRL-^
  已经很快了是吧，但还有更好的方式，那就是用插件:

|07.4| 备份
  我从来不需要这个功能
  
|07.5| 在文件间复制粘贴
  可以使用寄存器，复制多份，回头再看吧

|07.6| 查看文件
  通过只读属性打开文件，我不需要

|07.7| 更改文件名
  :saveas move.c


-------------------------------------------------------------------------------------------------------
8. 分隔窗口
  为什么人家的界面布局看起来那么酷

|08.1| 分隔一个窗口
  分成上下两个窗口              :split (新窗口位于当前窗口之上, 光标将定位到新窗口)
  窗口切换                      CTRL-w (CTRL-w只是进入切换状态，要切换到上下左右，还需要hjkl, w是下一个窗口, t最上，b最下) 
  关闭当前窗口                  :close (和:q一个效果，不同的是，它不会导致vim退出。个人更喜欢用:q)
  关闭所有其他窗口              :only
  
|08.2| 为另一个文件分隔出一个窗口
  另一个窗口中打开              :split two.c
  另一个窗口中打开空            :new

|08.3| 窗口大小
  增加当前窗口高度              CTRL-w + （4 CTRL-W + 更方便)
  减少当前窗口高度              CTRL-w -

|08.4| 垂直分隔
  分成左右两个窗口              :vsplit (或:vsplit two.c; :vnew)
  
|08.5| 移动窗口
  移动窗口                      CTRL-w (仍然是CTRL-w，不同的是后面跟大写)
  
|08.6| 针对所有窗口操作的命令
  任何命令后面加all即可         :qall  (例子)

|08.7| 使用vimdiff查看不同
  

|08.8| 其它
|08.9| 页签
  上面说的都是平铺方式, 但更多使用的是tab
  
  
  
: 命令行模式

Vim存在多个配置文件vimrc，比如/etc/vimrc，此文件影响整个系统的Vim。还有~/.vimrc，此文件只影响本用户的Vim。


c.vim, perl-support.vim ,bash-support.vim
 NERD_tree.vim taglist.vim srcexpl.vim
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
